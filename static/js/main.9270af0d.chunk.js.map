{"version":3,"sources":["Recipes.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","title","calories","image","ingredients","className","style","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","API_LINK","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,OAAS,wBAAwB,MAAQ,yB,mNCqB5CC,EAlBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,yBAAKC,UAAWC,IAAMN,QAClB,4BAAKC,GACL,4BACKG,EAAYG,KAAI,SAAAH,GAAW,OACxB,4BACKA,EAAYI,UAIzB,2BAAIN,GACJ,yBAAKG,UAAWC,IAAMH,MAAOM,IAAKN,EAAOO,IAAI,OCmE1CC,MA9Ef,WAAe,MAIeC,mBAAS,IAJxB,mBAIRC,EAJQ,KAICC,EAJD,OAMaF,mBAAS,IANtB,mBAMRG,EANQ,KAMAC,EANA,OAOWJ,mBAAS,WAPpB,mBAORK,EAPQ,KAODC,EAPC,KAaRC,EAAQ,0CAAsCF,EAAtC,mBAHC,WAGD,oBAFE,oCAKjBG,qBAAU,WACVC,MACG,CAACJ,IAKJ,IAAMI,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMJ,GADZ,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGnBZ,EAAWY,EAAKC,MAHG,2CAAH,qDAqBd,OACE,yBAAKtB,UAAU,OACb,8CACA,0BAAMA,UAAU,cAAcuB,SATlB,SAAAC,GAChBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,MAOJ,2BAAOX,UAAU,aAAa0B,KAAK,OAAOC,MAAOjB,EAAQkB,SAhB5C,SAAAJ,GACrBb,EAAUa,EAAEK,OAAOF,UAiBX,4BACA3B,UAAU,gBACV0B,KAAK,UAFL,WAQR,yBAAK1B,UAAU,WACdQ,EAAQN,KAAI,SAAAP,GAAM,OAEjB,kBAACmC,EAAD,CACAC,IAAKpC,EAAOA,OAAOqC,MACnBpC,MAAOD,EAAOA,OAAOqC,MACrBnC,SAAUF,EAAOA,OAAOE,SACxBC,MAAOH,EAAOA,OAAOG,MACrBC,YAAaJ,EAAOA,OAAOI,iBAR7B,OCnDoBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9270af0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipes_recipe__2bcTP\",\"image\":\"Recipes_image__1OHkn\"};","import React from 'react';\nimport style from './Recipes.module.css';\n\n\nconst recipe = ({title, calories, image, ingredients}) => {\n    return(\n        <div className={style.recipe}>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map(ingredients => (\n                    <li>\n                        {ingredients.text}\n                    </li>\n               )) }\n            </ol>\n            <p>{calories}</p>\n            <img className={style.image} src={image} alt=\"\"></img>\n        </div>\n    )\n}\n\n\nexport default recipe;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\n\nfunction App() {\n\n \n// adding events\nconst [recipes, setRecipes] = useState([]);\n// allowing for recipe search\nconst [search, setSearch] = useState('');\nconst [query, setQuery] = useState('chicken');\n\n // js code here\n const APP_ID = \"03927913\";\n const APP_KEY = \"99c5be86465c8385db4fa1951c34d9b0\";\n\n const API_LINK = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n\nuseEffect(() => {\ngetRecipes();\n}, [query]);\n\n\n// Fetching API data\n\nconst getRecipes = async() => {\n  const response = await fetch(API_LINK);\n  const data = await response.json();\nsetRecipes(data.hits);\n// console.log(data.hits);\n\n} \n\n// function for search \nconst updateSearch = e => {\nsetSearch(e.target.value);\n// console.log(search);\n}\n\n// sending data when user click submit\nconst getSearch = e => {\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n  return (\n    <div className=\"App\">\n      <h1>My Food Recipe</h1>\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n\n        <button \n        className=\"search-button\" \n        type=\"submit\">\n          Search\n        </button>\n      </form>\n\n{/* outputting the recipe data */}\n<div className=\"recipes\">\n{recipes.map(recipe => (\n  // adding props\n  <Recipe \n  key={recipe.recipe.label}\n  title={recipe.recipe.label} \n  calories={recipe.recipe.calories}\n  image={recipe.recipe.image}\n  ingredients={recipe.recipe.ingredients}\n  />\n))};\n</div>\n      {/* <h1 onClick={() =>setCounter(counter + 1)}>\n      {counter}\n      </h1> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}